{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDiAOKxGCILWOwHxN_mSRkvNQp4JBsCu2s\",\n  authDomain: \"nana-style-db.firebaseapp.com\",\n  projectId: \"nana-style-db\",\n  storageBucket: \"nana-style-db.appspot.com\",\n  messagingSenderId: \"359320186468\",\n  appId: \"1:359320186468:web:2b809dae472f358f31b971\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let addittionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exists\n  //create/set the document with the data from userAuth in my collection\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt,\n        ...addittionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  //if user data exists\n  //return userDocRef\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","addittionalInformation","userDocRef","uid","userSnapshot","console","log","exists","displayName","email","createAt","Date","error","message","createAuthUserWithEmailAndPassword","password"],"sources":["C:/Users/kfir/desktop/udemy/nana-style/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, \r\n          signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDiAOKxGCILWOwHxN_mSRkvNQp4JBsCu2s\",\r\n  authDomain: \"nana-style-db.firebaseapp.com\",\r\n  projectId: \"nana-style-db\",\r\n  storageBucket: \"nana-style-db.appspot.com\",\r\n  messagingSenderId: \"359320186468\",\r\n  appId: \"1:359320186468:web:2b809dae472f358f31b971\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\ngoogleProvider.setCustomParameters ({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\r\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth, addittionalInformation = {}) => {\r\n  if(!userAuth) return;\r\n  \r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n  const userSnapshot =await getDoc(userDocRef);\r\n  \r\n  console.log(userSnapshot);\r\n  console.log(userSnapshot.exists());\r\n\r\n  //if user data does not exists\r\n  //create/set the document with the data from userAuth in my collection\r\n  if(!userSnapshot.exists()){\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createAt,\r\n        ...addittionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating the user', error.message);\r\n    }\r\n  }\r\n  //if user data exists\r\n  //return userDocRef\r\n  return userDocRef;\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if(!email || !password) return;\r\n\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EACNC,kBAAkB,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,8BAA8B,QAAQ,eAAe;AACxH,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,+BAA+B;EAC3CC,SAAS,EAAE,eAAe;EAC1BC,aAAa,EAAE,2BAA2B;EAC1CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAId,kBAAkB,EAAE;AAE/Cc,cAAc,CAACC,mBAAmB,CAAE;EAClCC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAAE;AAC7B,OAAO,MAAMqB,qBAAqB,GAAG,MAAMnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC;AAChF,OAAO,MAAMK,wBAAwB,GAAG,MAAMrB,kBAAkB,CAACmB,IAAI,EAAEH,cAAc,CAAC;AAEtF,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,gBAAOC,QAAQ,EAAkC;EAAA,IAAhCC,sBAAsB,uEAAG,CAAC,CAAC;EACpF,IAAG,CAACD,QAAQ,EAAE;EAEd,MAAME,UAAU,GAAGrB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACG,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAE,MAAMtB,MAAM,CAACoB,UAAU,CAAC;EAE5CG,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;EACzBC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,MAAM,EAAE,CAAC;;EAElC;EACA;EACA,IAAG,CAACH,YAAY,CAACG,MAAM,EAAE,EAAC;IACxB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGT,QAAQ;IACvC,MAAMU,QAAQ,GAAG,IAAIC,IAAI,EAAE;IAE3B,IAAI;MACF,MAAM5B,MAAM,CAACmB,UAAU,EAAE;QACvBM,WAAW;QACXC,KAAK;QACLC,QAAQ;QACR,GAAGT;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,KAAK,CAACC,OAAO,CAAC;IACvD;EACF;EACA;EACA;EACA,OAAOX,UAAU;AACnB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,OAAOL,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAG,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EAExB,OAAO,MAAMpC,8BAA8B,CAACgB,IAAI,EAAEc,KAAK,EAAEM,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}